"use strict";
/* global fetch */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Populate the headers value of the init object appropriately. Allows any headers in init to
 * override the provided headers. Mutates init.
 * @param headers a set of headers to be set
 * @param init the fetch api request init object
 * @return an updated init object with the headers set appropriately
 */
const addHeadersToInitObject = (headers, init) => {
    if (init.headers) {
        init.headers = Object.assign(Object.assign({}, (headers || {})), init.headers);
    }
    else {
        init.headers = headers;
    }
    return init;
};
/**
 * Reimplementation of the fetch api to permit header injection as well as
 * 401 response handling for McKinsey ID.
 *
 * @param headersHandler - a possibly async function that creates headers for sending via fetch
 * @param unauthzHandler - a possibly async function that handles any actions required
 *   to respond to a 401 unauthorized http response
 * @param logoutHandler = logs the user out
 * @return a standard fetch api response
 */
exports.default = (headersHandler, unauthzHandler, logoutHandler) => (input, init) => __awaiter(void 0, void 0, void 0, function* () {
    const overrideInit = () => __awaiter(void 0, void 0, void 0, function* () {
        const headers = yield headersHandler();
        return !!init ? addHeadersToInitObject(headers, init) : { headers };
    });
    return fetch(input, yield overrideInit()).then((res) => __awaiter(void 0, void 0, void 0, function* () {
        if (!res.ok && res.status === 401) {
            yield unauthzHandler();
            return yield fetch(input, yield overrideInit()).then((res) => __awaiter(void 0, void 0, void 0, function* () {
                if (!res.ok && res.status === 401) {
                    logoutHandler();
                    return res;
                }
                else {
                    return res;
                }
            }));
        }
        else {
            return res;
        }
    }));
});
