"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkConfig = exports.checkConfigIsOIDC = exports.checkTenants = exports.checkTenant = exports.checkLoginInfo = exports.checkAuthFlow = exports.checkRefreshToken = exports.checkTokens = void 0;
const support_1 = require("./support");
const nonce_1 = require("./nonce");
const errors_1 = require("./errors");
/**
 * Validates that the given tokens are JWT and that the idToken nonce matches the local one
 * @param mid -
 * @param accessToken -
 * @param idToken -
 * @throws Error if tokens are not jwt or nonce mismatch with local one
 */
function checkTokens(mid, { accessToken, idToken }) {
    if (!support_1.jwtOrFail(accessToken) || !support_1.jwtOrFail(idToken)) {
        throw new Error(mid.errors.FAIL_BAD_TOKENS('Invalid tokens from auth callback'));
    }
    const idInfo = support_1.jwtDecode(idToken);
    if (!nonce_1.validateNonce(idInfo.nonce)) {
        throw new Error(mid.errors.ERR_MISCONFIGURATION('Nonce mismatch'));
    }
}
exports.checkTokens = checkTokens;
/**
 * Validates that the given refresh tokens is JWT
 * @param mid -
 * @param refreshToken -
 * @throws Error if refresh token is not jwt
 */
function checkRefreshToken(mid, refreshToken) {
    if (!support_1.jwtOrFail(refreshToken)) {
        throw new Error(mid.errors.FAIL_BAD_TOKENS('Invalid refresh token from auth callback'));
    }
}
exports.checkRefreshToken = checkRefreshToken;
function checkAuthFlow(flow) {
    return !!flow && ['auth_code', 'implicit'].includes(flow);
}
exports.checkAuthFlow = checkAuthFlow;
/**
 * Checks the login info for completeness
 * @param loginInfo - the login info from the solution endpoint
 * @return a list of errors; empty if no errors found
 */
exports.checkLoginInfo = (loginInfo) => {
    const errors = [];
    if (!loginInfo.appId) {
        errors.push('loginInfo missing application Id');
    }
    if (!loginInfo.oidcConfigUrl) {
        errors.push('loginInfo missing OIDC Configuration URL');
    }
    if (!loginInfo.authDriver) {
        errors.push('loginInfo missing authentication driver');
    }
    if (!loginInfo.authDriver) {
        errors.push('loginInfo missing authentication driver');
    }
    if (loginInfo.flow && !checkAuthFlow(loginInfo.flow)) {
        errors.push('provided flow in loginInfo is not supported');
    }
    return errors;
};
/**
 * Check a tenant object for errors
 *
 * @param tenant - the tenant to check for errors
 * @return an array of errors, empty if no errors found
 */
exports.checkTenant = (tenant) => {
    const errors = [];
    if (!tenant.tenantId) {
        errors.push('Missing tenant Id');
    }
    if (!tenant.domain) {
        errors.push('Missing domain');
    }
    if (!tenant.appId) {
        errors.push('Missing app Id');
    }
    if (!tenant.audience) {
        errors.push('Missing audience');
    }
    if (!tenant.oidcConfigUrl) {
        errors.push('Missing OIDC Configuration URL');
    }
    if (!tenant.authDriver) {
        errors.push('Missing authentication driver');
    }
    return errors;
};
/**
 * Check all tenants for errors.
 *
 * @param tenants - the list of tenants returned by the tenantSelect call
 * @return if there are any errors, they will be here
 */
exports.checkTenants = (tenants) => {
    const errors = [];
    // if tenants isn't iterable or it's simply missing, return an error
    if (!tenants || !tenants.forEach) {
        errors.push('No valid tenants provided');
    }
    else {
        tenants.forEach((tenant) => errors.concat(exports.checkTenant(tenant)));
    }
    return errors;
};
exports.checkConfigIsOIDC = (config) => {
    return 'loginInfo' in config && !!config.loginInfo;
};
/**
 * Sanity check the configuration.
 *
 * @param config - the configuration for mid-sdk
 * @throws an exception if the configuration is bad
 */
exports.checkConfig = (config) => {
    let errors = [];
    if (!config) {
        errors.push('config is missing, aborting mid-sdk startup');
    }
    else {
        try {
            if (!config.redirectUrl) {
                errors.push('redirectUrl must be populated');
            }
            else {
                new URL(config.redirectUrl).toString();
            }
        }
        catch (err) {
            errors.push(`redirectUrl "${config.redirectUrl}" is not valid`);
        }
        try {
            if (!config.logoutRedirectUrl) {
                errors.push('logoutRedirectUrl must be populated');
            }
            else {
                new URL(config.logoutRedirectUrl).toString();
            }
        }
        catch (err) {
            errors.push(`logoutRedirectUrl "${config.logoutRedirectUrl}" is not valid`);
        }
        if (exports.checkConfigIsOIDC(config)) {
            errors = errors.concat(exports.checkLoginInfo(config.loginInfo));
        }
        else {
            if (!config.loginWidget) {
                errors.push('loginWidget must be configured');
            }
            if (!config.drivers) {
                errors.push('drivers must be configured');
            }
        }
    }
    if (errors.length > 0) {
        const errorJson = JSON.stringify(errors);
        console.error(`failed to set up mid-sdk, errors ${errorJson}`);
        const { ERR_MISCONFIGURATION } = errors_1.makeErrors(config.errors);
        throw new Error(ERR_MISCONFIGURATION(errors.join(',')));
    }
};
