import { LoginInfo, MidConfig, MidOIDCConfig, MidTokens, Tenant, AuthFlow } from '../types';
import { MidCore } from './mid-core';
/**
 * Validates that the given tokens are JWT and that the idToken nonce matches the local one
 * @param mid -
 * @param accessToken -
 * @param idToken -
 * @throws Error if tokens are not jwt or nonce mismatch with local one
 */
export declare function checkTokens(mid: MidCore, { accessToken, idToken }: MidTokens): void;
/**
 * Validates that the given refresh tokens is JWT
 * @param mid -
 * @param refreshToken -
 * @throws Error if refresh token is not jwt
 */
export declare function checkRefreshToken(mid: MidCore, refreshToken: string): void;
export declare function checkAuthFlow(flow: string | undefined): flow is AuthFlow;
/**
 * Checks the login info for completeness
 * @param loginInfo - the login info from the solution endpoint
 * @return a list of errors; empty if no errors found
 */
export declare const checkLoginInfo: (loginInfo: LoginInfo) => string[];
/**
 * Check a tenant object for errors
 *
 * @param tenant - the tenant to check for errors
 * @return an array of errors, empty if no errors found
 */
export declare const checkTenant: (tenant: Tenant) => string[];
/**
 * Check all tenants for errors.
 *
 * @param tenants - the list of tenants returned by the tenantSelect call
 * @return if there are any errors, they will be here
 */
export declare const checkTenants: (tenants: Tenant[]) => string[];
export declare const checkConfigIsOIDC: (config: MidConfig) => config is MidOIDCConfig;
/**
 * Sanity check the configuration.
 *
 * @param config - the configuration for mid-sdk
 * @throws an exception if the configuration is bad
 */
export declare const checkConfig: (config: MidConfig) => void;
