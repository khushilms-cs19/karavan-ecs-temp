import { LoginWidget } from './LoginWidget';
import { AuthDriver } from './AuthDriver';
import { LoginInfo } from './LoginInfo';
import { MidAuthnContext } from './MidAuthnContext';
import { Tenant } from './Tenant';
import { MidErrorCodes } from './Errors';
export interface MidTokens {
    accessToken: string;
    idToken: string;
}
export declare type MidPrivacyMode = 'default' | 'privacy';
export interface MidConfigCore {
    redirectUrl: string;
    logoutRedirectUrl: string;
    scopes?: string[];
    errors?: Partial<MidErrorCodes>;
    landingFn?(landing: MidAuthnContext): Promise<void>;
    setCookie?(tokens: (MidTokens & {
        tenant?: string;
    }) | null): Promise<void>;
}
export interface MidOIDCConfig extends MidConfigCore {
    loginInfo: LoginInfo;
}
export interface MidDriverConfig extends MidConfigCore {
    drivers: Record<string, AuthDriver>;
    loginWidget: LoginWidget;
    mode?: MidPrivacyMode;
    emailToLoginInfo(email: string): Promise<LoginInfo>;
    tenantListing(email: string, accessToken: string): Promise<{
        endpoints: Tenant[];
    }>;
}
export declare type MidConfig = MidOIDCConfig | MidDriverConfig;
