import { AccessInfo, IdInfo, MidAuthnContext, MidConfig, UserInfo } from '../types';
import { MidOIDCCore } from './mid-oidc-core';
import { MidDriverCore } from './mid-driver-core';
/**
 * McKinsey ID Public API Surface
 */
export declare class Mid {
    core: MidOIDCCore | MidDriverCore;
    /**
     * Build the Mid object
     *
     * @param config - the configuration for McKinsey ID
     */
    constructor(config: MidConfig);
    /**
     * Is this user authenticated and has a tenant?
     *
     * Note that this only requires that the user have a valid tenant and access token. Not that the token
     * is valid for YOUR solution. Please do not expose sensitive information before verifying that the access
     * token is valid on the server-side.
     *
     * @returns is the user authenticated?
     */
    isAuthed(): Promise<boolean>;
    /**
     * @return Decode the access token and return the information inside
     */
    accessInfo(): AccessInfo | null;
    /**
     * @return Decode the id token and return the payload
     */
    idInfo(): IdInfo | null;
    /**
     * @return the access Token used to authenticate against a remote api
     */
    accessToken(): string | null;
    /**
     * @return the id Token used to hold the authenticated party's identity
     */
    idToken(): string | null;
    /**
     * Perform an authentication. This function suspends until a valid authenticated token exists.
     *
     * @return upon a successful authentication, a MidAuthnContext
     */
    login(): Promise<MidAuthnContext>;
    /**
     * Attempt to refresh the user's access token
     *
     * @return an asynchronous attempt to refresh the access token
     */
    refresh(): Promise<void>;
    /**
     * Perform a logout. Destroys all local McKinsey ID information.
     *
     * @return a suspended promise that resolves upon completion of logout.
     */
    logout(): Promise<void>;
    /**
     * Get user info
     */
    getUserInfo(): Promise<UserInfo | null>;
}
