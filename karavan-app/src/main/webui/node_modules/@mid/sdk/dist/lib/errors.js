"use strict";
/* eslint-disable security/detect-object-injection */
Object.defineProperty(exports, "__esModule", { value: true });
exports.errors = exports.makeErrors = void 0;
exports.makeErrors = (errorMap) => {
    /**
     * Provides a simple way to allow an error code to optionally be provided a message.
     * Logs to console.error if available.
     *
     * @param code - the error code as defined in the README
     * @return a function that takes an optional message and produces a human readable error code
     */
    const cm = (code) => (msg) => {
        if (errorMap && errorMap[code]) {
            const s = `${code} - ${errorMap[code]}`;
            if (console && console.error)
                console.error(`${s}${msg ? ` - ${msg}` : ''}`);
            return s;
        }
        const s = !!msg ? `${code} - ${msg}` : code;
        if (console && console.error)
            console.error(s);
        return s;
    };
    return {
        // Axx level failures
        FAIL_CREDENTIALS: cm('A00'),
        FAIL_USER_LOCKOUT: cm('A01'),
        FAIL_PASSWD_EXPIRE: cm('A02'),
        FAIL_MFA_CHALLENGE: cm('A03'),
        // Bxx level transient failures
        FAIL_CONN_LOGIN_INFO: cm('B00'),
        FAIL_CONN_IDP: cm('B01'),
        FAIL_RATE_LIMIT: cm('B02'),
        FAIL_RETR_METADATA: cm('B03'),
        FAIL_TEMP: cm('B04'),
        FAIL_BAD_TOKENS: cm('B05'),
        FAIL_CONN_TENANT_SELECT: cm('B06'),
        FAIL_RETR_TOKEN: cm('B07'),
        // Fxx level errors
        ERR_UNHANDLED: cm('F00'),
        ERR_INVALID_REQUEST_IDP: cm('F01'),
        ERR_INVALID_REQUEST_MFA: cm('F02'),
        ERR_MISCONFIGURATION: cm('F03'),
        ERR_MISSING_AUTH_DRIVER: cm('F04'),
        ERR_UNSUPPORTED: cm('F05'),
    };
};
// Legacy support for errors. Should use `midCore.errors` instead, wherever possible.
exports.errors = exports.makeErrors();
