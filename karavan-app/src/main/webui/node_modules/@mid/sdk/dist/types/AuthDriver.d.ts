import { Tenant } from './Tenant';
import { MidDriverCore } from '../lib/mid-driver-core';
import { LoginInfo } from './LoginInfo';
import { UserInfo } from './UserInfo';
import { MidTokens } from './MidConfig';
export interface AuthDriver {
    logout(midCore: MidDriverCore, loginInfo: LoginInfo): Promise<void>;
    hostedForgotPassword(email: string, redirectUrl: string | URL, loginInfo: LoginInfo): Promise<void>;
    hostedLogin(midCore: MidDriverCore, baseUrl: string, redirectUrl: string, nonce: string, email: string, password: string, scopes: string[] | null, tenantConfig: Tenant): Promise<void>;
    redirectLogin(midCore: MidDriverCore, redirectUrl: string | URL, state: string | null, email: string, scopes: string[] | null, loginInfo: LoginInfo): Promise<void>;
    refresh(midCore: MidDriverCore, redirectUrl: string | URL, scopes: string[] | null, loginInfo: LoginInfo): Promise<void>;
    attemptSSO(midCore: MidDriverCore, loginInfo: LoginInfo): Promise<void>;
    redirectLanding(midCore: MidDriverCore, params: Record<string, any>, loginInfo: LoginInfo): void;
    userInfo(midCore: MidDriverCore, tenantConfig: Tenant): Promise<UserInfo>;
    verifyTokens(midCore: MidDriverCore, loginInfo: LoginInfo, tokens: MidTokens): Promise<string[]>;
    email(midCore: MidDriverCore, loginInfo: LoginInfo): Promise<string>;
}
