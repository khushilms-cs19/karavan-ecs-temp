import { MidCore } from './mid-core';
import { AuthDriver, LoginInfo, LoginWidget, MidAuthnContext, MidDriverConfig, UserInfo, Tenant, MidPrivacyMode } from '../types';
/**
 * Private implementation for McKinsey ID
 */
export declare class MidDriverCore extends MidCore {
    mode: MidPrivacyMode;
    loginWidget: LoginWidget;
    drivers: Record<string, AuthDriver>;
    emailToLoginInfo: (email: string) => Promise<LoginInfo>;
    tenantListing: (email: string, accessToken: string) => Promise<{
        endpoints: Tenant[];
    }>;
    /**
     * Create a new MidCore instance
     *
     * @param config - the Mid configuration
     */
    constructor(config: MidDriverConfig);
    /**
     * Returns the driver registered under "driverName" or null if no driver by that name is found
     * @param driverName - the driver to look for a registry entry for. Canonicalizes the name to lowercase
     * @return an authDriver or null
     */
    driverFor(driverName: string): AuthDriver | null;
    /**
     * Completes the login process. Makes sure the various required data is stored correctly.
     */
    onComplete(): Promise<void>;
    /**
     * Handle the redirectUri landing
     * @param loginInfo - the login configuration
     */
    redirectLanding(loginInfo: LoginInfo | null): void;
    /**
     * Is the user authenticated?
     *
     * @return is this user logged in (after checking sso)
     */
    isAuthed(): Promise<boolean>;
    /**
     * Attempt to log the user in.
     *
     * @return authentication context
     */
    login(): Promise<MidAuthnContext>;
    /**
     * Attempt to refresh the user's tokens, the driver is responsible for destroying the
     * login information if there is any problem refreshing.
     *
     * @return suspends until the refresh is complete
     */
    refresh(): Promise<void>;
    /**
     * Log the user out
     */
    logout(): Promise<void>;
    /**
     * Initiate the redirect login flow
     *
     * @param email - the user's email
     * @param loginInfo - the user's login info
     */
    redirectLogin(email: string, loginInfo: LoginInfo): Promise<void>;
    /**
     * Initiate the hosted login flow.
     *
     * @param _email - the user's email
     * @param _password - the password
     * @param _tenant - the tenant
     */
    hostedLogin(_email: string, _password: string, _tenant: string): Promise<void>;
    /**
     * Perform the hosted "forgot password" flow.
     *
     * @param mid - the mid core instance
     * @param email - the user's email
     * @param tenant - the tenant to recover the password for
     */
    hostedForgotPassword(mid: MidDriverCore, email: string, tenant: Tenant): Promise<void>;
    /**
     * Get user info.
     *
     * @return UserInfo
     */
    getUserInfo(): Promise<UserInfo | null>;
}
