"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MidDriverCore = void 0;
/* global localStorage */
const consts = require("./constants");
const immutable_1 = require("immutable");
const state_machine_1 = require("./state-machine");
const drivers_1 = require("./drivers");
const support_1 = require("./support");
const mid_core_1 = require("./mid-core");
/**
 * Private implementation for McKinsey ID
 */
class MidDriverCore extends mid_core_1.MidCore {
    /**
     * Create a new MidCore instance
     *
     * @param config - the Mid configuration
     */
    constructor(config) {
        var _a;
        super(config);
        this.mode = (_a = config.mode) !== null && _a !== void 0 ? _a : 'default';
        this.loginWidget = config.loginWidget;
        this.drivers = {};
        Object.entries(config.drivers).forEach(([k, v]) => {
            this.drivers[k.toLowerCase()] = v;
        });
        this.emailToLoginInfo = config.emailToLoginInfo;
        this.tenantListing = config.tenantListing;
        this.state = immutable_1.Map().set(state_machine_1.PHASE, state_machine_1.ST.START).set(state_machine_1.DATA, null).set(state_machine_1.MID, this);
        const loginInfo = support_1.getLoginInfo();
        if (this.redirectUrl.pathname === window.location.pathname) {
            // Landing on MID from a redirect from the IdP
            this.redirectLanding(loginInfo);
        }
        else {
            if (loginInfo) {
                // attempt to SSO
                try {
                    const tenant = support_1.getTenant();
                    if (tenant) {
                        const tenantInfo = support_1.tenantToLoginInfo(tenant);
                        const driver = drivers_1.default(this, tenantInfo);
                        this._sso = driver.attemptSSO(this, tenantInfo);
                    }
                    else {
                        const driver = drivers_1.default(this, loginInfo);
                        this._sso = driver.attemptSSO(this, loginInfo);
                    }
                    return;
                }
                catch (err) {
                    // login information was bad - remove it
                    support_1.destroyStorage(this);
                }
                this._sso = Promise.resolve();
                this.state = this.loginWidget.transition(this.state);
            }
        }
    }
    /**
     * Returns the driver registered under "driverName" or null if no driver by that name is found
     * @param driverName - the driver to look for a registry entry for. Canonicalizes the name to lowercase
     * @return an authDriver or null
     */
    driverFor(driverName) {
        const driver = this.drivers[driverName.toLowerCase()];
        if (!driver) {
            return null;
        }
        else {
            return driver;
        }
    }
    /**
     * Completes the login process. Makes sure the various required data is stored correctly.
     */
    onComplete() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const loginInfo = support_1.getLoginInfo();
                const tenant = support_1.getTenant();
                const accessToken = this.accessToken();
                const idToken = this.idToken();
                yield support_1.onComplete(this, loginInfo, idToken, accessToken, tenant);
            }
            catch (err) {
                yield support_1.destroyStorage(this);
                console.error(this.errors.ERR_UNHANDLED('Misconfiguration in the tenant/token/login info flow. Abandoning login'));
            }
        });
    }
    /**
     * Handle the redirectUri landing
     * @param loginInfo - the login configuration
     */
    redirectLanding(loginInfo) {
        try {
            if (!loginInfo)
                return;
            support_1.onLanding(this, loginInfo);
        }
        catch (err) {
            console.error(this.errors.ERR_UNHANDLED('Error encountered while handling token landing'), err);
        }
    }
    /**
     * Is the user authenticated?
     *
     * @return is this user logged in (after checking sso)
     */
    isAuthed() {
        return __awaiter(this, void 0, void 0, function* () {
            yield (typeof this._sso === 'function' ? this._sso() : this._sso);
            return !!support_1.getAccessToken() && !!support_1.getTenant();
        });
    }
    /**
     * Attempt to log the user in.
     *
     * @return authentication context
     */
    login() {
        return __awaiter(this, void 0, void 0, function* () {
            const isAuthed = yield this.isAuthed();
            return new Promise((resolve) => {
                this._loginResolvers.push(support_1.wrapLoginResolver(resolve));
                if (isAuthed) {
                    this.onLoginResolve();
                }
            });
        });
    }
    /**
     * Attempt to refresh the user's tokens, the driver is responsible for destroying the
     * login information if there is any problem refreshing.
     *
     * @return suspends until the refresh is complete
     */
    refresh() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._refreshLatch)
                return yield this._refreshLatch;
            const tenant = support_1.getTenant();
            if (tenant) {
                try {
                    const loginInfo = support_1.tenantToLoginInfo(tenant);
                    this._refreshLatch = drivers_1.default(this, loginInfo).refresh(this, this.redirectUrl, this.scopes, loginInfo);
                    yield this._refreshLatch;
                    this._refreshLatch = null;
                }
                catch (err) {
                    // it's likely the refresh didn't happen. a logout should immediately follow.
                    console.error(err);
                    yield this.logout();
                    this._refreshLatch = null;
                }
            }
        });
    }
    /**
     * Log the user out
     */
    logout() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const tenant = support_1.getTenant();
                if (tenant) {
                    const loginInfo = support_1.tenantToLoginInfo(tenant);
                    yield drivers_1.default(this, loginInfo).logout(this, loginInfo);
                }
            }
            catch (err) {
                console.error('error encountered trying to log out from idp', err);
            }
            finally {
                // stop any timer
                if (this.timer) {
                    clearInterval(this.timer);
                }
                yield support_1.destroyStorage(this);
                window.location.assign(this.logoutRedirectUrl);
            }
        });
    }
    /**
     * Initiate the redirect login flow
     *
     * @param email - the user's email
     * @param loginInfo - the user's login info
     */
    redirectLogin(email, loginInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!loginInfo) {
                throw new Error(this.errors.ERR_MISCONFIGURATION('Missing Login Information'));
            }
            try {
                const driver = drivers_1.default(this, loginInfo);
                return yield driver.redirectLogin(this, this.redirectUrl, null, email, this.scopes, loginInfo);
            }
            catch (err) {
                yield support_1.destroyStorage(this);
                throw err;
            }
        });
    }
    /**
     * Initiate the hosted login flow.
     *
     * @param _email - the user's email
     * @param _password - the password
     * @param _tenant - the tenant
     */
    hostedLogin(_email, _password, _tenant) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Currently Unsupported');
            // todo unbreak this once hosted logins work again
            // if (!tenant) {
            //   throw new Error(errors.ERR_MISCONFIGURATION('Missing Tenant Information'));
            // }
            //
            // let driver;
            //
            // try {
            //   driver = driverFor(tenant);
            // } catch (err) {
            //   await destroyStorage(this);
            //   return await this.hostedLogin(email, password, tenant);
            // }
            //
            // try {
            //   await driver.hostedLogin(
            //     this,
            //     this.redirectUrl,
            //     email,
            //     password,
            //     this.scopes,
            //     tenant);
            // } catch (err) {
            //   throw new Error(errors.ERR_UNHANDLED(err));
            // }
        });
    }
    /**
     * Perform the hosted "forgot password" flow.
     *
     * @param mid - the mid core instance
     * @param email - the user's email
     * @param tenant - the tenant to recover the password for
     */
    hostedForgotPassword(mid, email, tenant) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const driver = drivers_1.default(mid, support_1.tenantToLoginInfo(tenant));
                yield driver.hostedForgotPassword(email, this.redirectUrl, tenant);
            }
            catch (err) {
                throw new Error(this.errors.ERR_UNHANDLED(err));
            }
        });
    }
    /**
     * Get user info.
     *
     * @return UserInfo
     */
    getUserInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const user = localStorage.getItem(consts.MID_USER_INFO_KEY);
                if (user) {
                    return JSON.parse(user);
                }
                const tenant = support_1.getTenant();
                if (tenant) {
                    const driver = drivers_1.default(this, support_1.tenantToLoginInfo(tenant));
                    const user = yield driver.userInfo(this, tenant);
                    if (user) {
                        localStorage.setItem(consts.MID_USER_INFO_KEY, JSON.stringify(user));
                    }
                    return user;
                }
            }
            catch (err) {
                console.error(Error(this.errors.ERR_UNHANDLED(err)));
            }
            return null;
        });
    }
}
exports.MidDriverCore = MidDriverCore;
