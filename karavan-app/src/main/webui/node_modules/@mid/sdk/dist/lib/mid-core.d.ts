import { MidErrors, LoginInfo, MidAuthnContext, MidConfigCore, MidState, MidTokens, Tenant, UserInfo } from '../types';
/**
 * Private implementation for McKinsey ID
 */
export declare class MidCore {
    redirectUrl: URL;
    logoutRedirectUrl: string;
    scopes: string[];
    timer: number | null;
    state: MidState;
    errors: MidErrors;
    _refreshLatch?: Promise<any> | null;
    _sso: Promise<any> | (() => Promise<any>) | null;
    _loginResolvers: ((core: MidCore) => void)[];
    _loginRejects: ((err: Error) => void)[];
    _landingFn?: (landing: MidAuthnContext) => Promise<void>;
    _setCookie?: (tokens: (MidTokens & {
        tenant?: string;
    }) | null) => Promise<void>;
    /**
     * Create a new MidCore instance
     *
     * @param config - the Mid configuration
     */
    constructor(config: MidConfigCore);
    /**
     * Resolve promises for all registered login resolvers
     */
    onLoginResolve(): void;
    /**
     * Calls on error in the login flow, destroys storage
     * @param err - Error
     */
    onLoginFailure(err: Error): Promise<void>;
    /**
     * To call when the login flow is complete
     * Resolves all login resolvers and calls to landingFn if needed.
     */
    onComplete(): Promise<void>;
    /**
     * Sets the tokens for this mid instance
     * @param idToken the ID Token from an OIDC IdP
     * @param accessToken the Access Token from an OIDC IdP
     * @return the mid instance
     */
    setTokens(idToken: string, accessToken: string): Promise<MidCore>;
    /**
     * Sets the loginInfo for this mid instance
     * @param loginInfo - The login info
     * @return the mid instance
     */
    setLoginInfo(loginInfo: LoginInfo): MidCore;
    /**
     * Sets the browser state for the tenant config provided
     *
     * @param tenantConfig - the tenant configuration
     * @return the mid instance
     */
    setTenant(tenantConfig: Tenant): MidCore;
    /**
     * Tries to set the cookies for the client
     *
     * @return the mid instance
     */
    setCookie(): Promise<MidCore>;
    /**
     * Is the user authenticated?
     *
     * @return is this user logged in (after checking sso)
     */
    isAuthed(): Promise<boolean>;
    /**
     * Attempt to log the user in.
     *
     * @return authentication context
     */
    login(): Promise<MidAuthnContext>;
    /**
     * Attempt to refresh the user's tokens, the driver is responsible for destroying the
     * login information if there is any problem refreshing.
     *
     * @return suspends until the refresh is complete
     */
    refresh(): Promise<void>;
    /**
     * Log the user out
     */
    logout(): Promise<void>;
    /**
     * @return the access Token used to authenticate against a remote api
     */
    accessToken(): string | null;
    /**
     * @return the id Token used to hold the authenticated party's identity
     */
    idToken(): string | null;
    /**
     * Get user info.
     *
     * @return UserInfo
     */
    getUserInfo(): Promise<UserInfo | null>;
}
