import { LoginInfo, MidTokens, OIDCAuthorizeUrl, OIDCConfig, AuthFlow, UserInfo } from '../types';
import { MidCore } from './mid-core';
/**
 * Retrieves the OIDC config using the login info OIDC config url
 * @param mid - the MidCore instance
 * @param loginInfo - the Tenant's configuration
 * @returns OIDC Config
 * @throws if the OIDC fetch fails or the payload is invalid
 */
export declare function retrieveOIDCConfig(mid: MidCore, loginInfo: LoginInfo): Promise<OIDCConfig>;
/**
 * Creates the url to redirect the user to for OIDC call to /authorize
 *
 * Reaches out to the oidc well-known endpoint to get the configuration
 *
 * @param mid - the MidCore instance
 * @param authFlow - authorization flow type
 * @param props -
 * @param props.redirectUrl - the url to redirect back to when authorization is complete
 * @param props.nonce - a cryptographically secure nonce, use nonceService for this
 * @param props.loginInfo - the Tenant's configuration
 * @param props.state - any state parameter to be passed back once authorization is complete, this will be urlencoded
 * @param props.responseType - id_token, id_token token, token, code
 * @param props.email - the email provided for login hinting, if null, will not br provided
 * @param props.scopes - scopes requested
 * @param props.prompt - prompt type
 * @return the url to redirect to
 * @throws {Error} if the nonce is not provided, or if the OIDC fetch fails
 */
export declare function makeOIDCAuthorizeUrl(mid: MidCore, authFlow: AuthFlow, props: OIDCAuthorizeUrl): Promise<URL>;
/**
 * Creates the url to get user info from OIDC service
 *
 * Reaches out to the oidc well-known endpoint to get the configuration
 *
 * @param mid - the MidCore instance
 * @param loginInfo - the Tenant's configuration
 * @return the url to redirect to
 * @throws {Error} if the nonce is not provided, or if the OIDC fetch fails
 */
export declare function makeOIDCUserInfoUrl(mid: MidCore, loginInfo: LoginInfo): Promise<URL>;
/**
 * Logs out the current user
 *
 * @param mid - the MidCore instance
 * @param loginInfo - the Tenant's configuration
 * @param idToken - Session id token
 * @param redirectUrl - to go after a logout
 * @return the url to redirect to
 */
export declare function makeOIDCLogoutURL(mid: MidCore, loginInfo: LoginInfo, idToken: string, redirectUrl: string | URL): Promise<URL>;
/**
 * Request a id_token and access_token from the OIDC /token endpoint using the authorization code
 *
 * @param mid - the MidCore instance
 * @param loginInfo - the Tenant's configuration
 * @param redirectUrl - the url to redirect back to when authorization is complete
 * @param code - returned by the authentication endpoint
 * @param codeVerifier - code verifier
 * @returns the tokens
 */
export declare function requestTokens(mid: MidCore, loginInfo: LoginInfo, redirectUrl: string | URL, code: string, codeVerifier: string): Promise<MidTokens & {
    refreshToken: string;
}>;
/**
 * Request a new id_token and access_token from the OIDC /token endpoint using the refresh_token
 *
 * @param mid - the MidCore instance
 * @param loginInfo the Tenant's configuration
 * @param refreshToken - a valid refresh token
 * @returns the refreshed tokens
 */
export declare function refreshTokens(mid: MidCore, loginInfo: LoginInfo, refreshToken: string): Promise<MidTokens>;
/**
 * Request a new id_token and access_token from the OIDC provider using a hidden iframe
 * The iframe will load the OIDC /auth endpoint and if the user session is still valid, will collect the new tokens
 * The iframe should send a message (via window.postMessage) to its parent
 *
 * @param mid - the MidCore instance
 * @param authFlow - authorization flow type
 * @param redirectUrl - the url to redirect back to when authorization is complete
 * @param nonce - a cryptographically secure nonce, use nonceService for this
 * @param loginInfo - the Tenant's configuration
 * @returns the refreshed tokens
 */
export declare function refreshSessionTokens(mid: MidCore, authFlow: AuthFlow, redirectUrl: string | URL, nonce: string, loginInfo: LoginInfo): Promise<MidTokens>;
/**
 * Verify tokens against the OIDC service
 *
 * Reaches out to the oidc well-known endpoint to get the configuration
 *
 * @param mid - the MidCore instance
 * @param loginInfo the Tenant's configuration
 * @param tokens to verify
 * @throws {Error} if one of the tokens is invalid, will throw an error
 */
export declare function verifyTokens(mid: MidCore, loginInfo: LoginInfo, tokens: Record<string, string>): Promise<void>;
/**
 * Loads user info from the OIDC service
 *
 * Reaches out to the oidc well-known endpoint to get the configuration
 *
 * @param mid - the MidCore instance
 * @param loginInfo the Tenant's configuration
 * @throws {Error} if the response is invalid, will throw an error
 */
export declare function getUserInfo(mid: MidCore, loginInfo: LoginInfo): Promise<UserInfo>;
