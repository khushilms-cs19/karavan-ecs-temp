"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeNonce = exports.validateNonce = exports.storeNonce = exports.getNonce = void 0;
/* global sessionStorage */
const consts = require("./constants");
/**
 * Generate a random string using window.crypto
 * See https://auth0.com/docs/api-auth/tutorials/nonce
 * @param length - the length of the string
 * @return the random string
 */
const randomString = (length) => {
    const bytes = new Uint8Array(length);
    const random = window.crypto.getRandomValues(bytes);
    const result = [];
    const charset = '0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvwxyz-._~';
    random.forEach(function (c) {
        result.push(charset[c % charset.length]);
    });
    return result.join('');
};
/**
 * get the stored nonce in the browser
 *
 * @returns nonce
 */
exports.getNonce = () => {
    return sessionStorage.getItem(consts.MID_NONCE);
};
/**
 * store the nonce in the browser
 *
 * @param nonce - the nonce to store
 */
exports.storeNonce = (nonce) => {
    sessionStorage.setItem(consts.MID_NONCE, nonce);
};
/**
 * validate the provided nonce against the one stored in the browser
 *
 * @param nonce - the nonce to check
 * @return was the nonce the same?
 */
exports.validateNonce = (nonce) => {
    const previousNonce = sessionStorage.getItem(consts.MID_NONCE);
    // nonce must be truthy as well as equivalent to the stored nonce
    return !!nonce && nonce === previousNonce;
};
/**
 * Creates a new cryptographically sound nonce
 * @return a nonce
 */
exports.makeNonce = () => randomString(32);
